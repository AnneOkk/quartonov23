---
title: "Introduction to reproducible data analysis with R and Quarto - Day II"
title-slide-attributes:
    data-background-color: "#a13c65"
    data-background-image: "images/LMU_Logo.png"
    data-background-size: 15%
    data-background-position: 50% 83%
subtitle: "KLI Seminar 2023"
author:
  - name: Anne-Kathrin Kleine
format:
  revealjs: 
    slide-number: true
    width: 1500
    height: 1000
    chalkboard: 
      buttons: false
    preview-links: false
    footer: <https://quarto.org>
    theme: [simple, custom.scss]
    logo: "images/LMU_Logo.png"
    scrollable: false
    center: true
    incremental: false
    link-external-newwindow: true
resources:
  - demo.pdf
---

```{r include=FALSE}
library(fontawesome)
library(quarto)
library(tidyverse)
```

# Schedule {background-color="#a13c65"}

## DAY 2

::: fragment
### 09.00-9.30: Recap from yesterday, tidystats and the groundhog package
:::

<br/>

::: fragment
### 09.30-10.30: Publishing Reproducible Data Analysis Scripts

-   Sharing your scripts and data
-   Publishing through GitHub, RPubs; integration with osf
:::

::: fragment

### 11.00-12.30: Hands-on Practice (with break)

-   Structure, code, and version control: Work on your data analysis project 
:::

::: fragment
### 12.30-13.00: Closing Remarks 

-   Recap of the workshop
-   Q&A session
:::

# Recap, dependencies, and the groundhog package {background-color="#a13c65"}

## Packages and package dependecies

::: fragment
![](https://media.giphy.com/media/l2SpS6MdfeYgPHZpC/giphy.gif)
:::

## What happened and how to avoid it

-   The `custom_functions.R` file was pretty massive and needed many R packages that many of you had not installed

. . .

-   One way around that: deleting all functions that are not needed and install relevant packages for the remaining (what we did yesterday)

## Another solution: using the `dependencies` package

```{r}
#| echo: fenced
#| eval: false
library(renv)
deps <- dependencies(path = "Exercise/R")

# Extract package names
pkgs <- deps$Package

# Remove duplicates, just in case
pkgs <- unique(pkgs)

# Install packages
install.packages(pkgs)
```

::: fragment
... however, that does not work if you are using different versions of packages!
:::

## The `groundhog` package

-   Different versions of a package may produce different results or are different in terms of functionality

. . .

-   When sharing scripts/code or when collaborating with others on a project, using the same version of a package becomes crucial

. . .

-   The `groundhog` package in R is used for managing the package dependencies in an R script with specific requirements for package versions

. . .

-   The `groundhog` package allows users to load packages from a specific date in the past

. . .

-   Instead of loading the most recent (or installed) version of a package with the `library()` function, users can load a version of the package that was current as of a specific date

## The `groundhog` package

-   With groundhog, the only thing you need to change to make your R code reproducible is:

|             |                                |
|-------------|--------------------------------|
| Instead of: | `library(pkg)`                 |
| Do this:    | `groundhog.library(pkg, date)` |

## The `groundhog` package

```{r}
#| echo: fenced
#| eval: false
library("groundhog")
groundhog.library(pkgs, "2022-12-01")
```

## For your current scripts
```{r}
#| echo: fenced
#| eval: false
library("groundhog")
groundhog.library("
    library(pkgA)
    library(pkgB)
    library(pkgC)   ",    date)
```



### [pretty insightful article on the `groundhog` package](https://datacolada.org/100)

## Tidystats

Learn how to use it [here](https://www.tidystats.io/word-add-in/)

# Version control {background-color="#a13c65"}

## What is version control?

-   Version control, also known as source control, is the practice of tracking and managing changes to software code

. . .

-   Version control systems are software tools that help software teams manage changes to source code over time

## The benefits of version control

-   A complete long-term change history of every file

. . .

-   Branching and merging

. . .

-   Ability to make your work more reproducible

. . .

-   Collaboration through platforms hosting versions of your code

## What is Git?

![](images/logo-Git.png)

-   Git is a software that keeps track of versions of a set of files
-   It is *local* to you; the records are kept on your computer

## What is GitHub?

![](images/github.png)

-   a hosting service that can keep the records
-   it is *remote* to you, like Dropbox
-   GitHub is specifically structured to keep records with Git

# Getting started with Git {background-color="#a13c65"}

## 

### 1. Check that Git is installed

-   In the terminal (in RStudio), type

::: {style="font-size: 70px;"}
``` {.bash filename="terminal"}
which git
```
:::

<br/>

::: fragment
-   Check your git version

``` {.bash filename="terminal"}
git --version
```
:::

<br/>

::: fragment
### 2. Generate token

-   Go to <https://github.com/settings/tokens> and click Generate token
:::

## 

### 3. Set credentials from within RStudio

``` {.bash filename="terminal"}
gitcreds::gitcreds_set()
```

<br/>

::: fragment
### 4. Tell Git who you are

``` {.bash filename="terminal"}
git config --global user.name "jack.bel" # use your GitHub username instead
git config --global user.email jack.bel@gmail.com # use your mail address that you have for your Github account instead
```
:::

<br/>

::: fragment
Or:

``` {.bash filename="terminal"}
install.packages("usethis")
usethis::use_git_config(user.name="Jane Doe", user.email="jane@example.org")
```

:::

# GitHub Knowledge Base {background-color="#a13c65"}

## GitHub Knowledge Base

![](images/Git-process1.png)

## GitHub Knowledge Base

![](images/Git-process2.png)

## GitHub Knowledge Base

![](images/Git-process3.png)

## GitHub Knowledge Base

![](images/Git-process4.png)

## GitHub Knowledge Base

![](images/Git-process5.png)

## GitHub Knowledge Base

![](images/Git-process6.png)

## GitHub Knowledge Base

![](images/Git-process7.png)

## GitHub Knowledge Base

+-----------------------------------+---------------------------------------------------------------------+
| Commands                          | Operations                                                          |
+===================================+=====================================================================+
| `git init <directory>`            | Create empty Git repo in specified directory                        |
+-----------------------------------+---------------------------------------------------------------------+
| `git clone <repository>`          | Clone a repository located at <repository> your local machine       |
+-----------------------------------+---------------------------------------------------------------------+
| `git config user.name <username>` | Define author name to be used for all commits in current repository |
+-----------------------------------+---------------------------------------------------------------------+
| `git add <directory>`             | Stage all changes in <directory> for the next commit                |
+-----------------------------------+---------------------------------------------------------------------+



## GitHub Knowledge Base

+-----------------------------------+-------------------------------------------------------------------------------------------------------------+
| Commands                          | Operations                                                                                                  |
+===================================+=============================================================================================================+
| `git commit -m <"message">`       | Commit the staged snapshot, but instead of launching a text editor, use \<"message"\> as the commit message |
+-----------------------------------+-------------------------------------------------------------------------------------------------------------+
| `git status`                      | List which files are staged, unstaged, and untracked                                                        |
+-----------------------------------+-------------------------------------------------------------------------------------------------------------+
| `git log`                         | Display the entire commit history using the default format                                                  |
+-----------------------------------+-------------------------------------------------------------------------------------------------------------+

## GitHub Knowledge Base

+-----------------------------------+--------------------------------------------------------------------------------------------------+
| Commands                          | Operations                                                                                       |
+===================================+==================================================================================================+
| `git pull <remote>`               | Fetch the specified remote's copy of current branch and immediately merge it into the local copy |
+-----------------------------------+--------------------------------------------------------------------------------------------------+
| `git push <remote> <branch>`      | Upload local repository content to a remote repository                                           |
+-----------------------------------+--------------------------------------------------------------------------------------------------+

## GitHub Knowledge Base

+-------------------+-------------------------------------------------------------------------------------------------------------------+
| **Pull requests** | -   Proposed changes to a repository submitted by a user and accepted or rejected by a repository's collaborators |
|                   |                                                                                                                   |
|                   | -   Pull requests each have their own discussion forum                                                            |
+-------------------+-------------------------------------------------------------------------------------------------------------------+
| **Issues**        | -   Suggested improvements, tasks or questions related to the repository                                          |
|                   |                                                                                                                   |
|                   | -   Can be created by anyone (for public repositories), and are moderated by repository collaborators             |
|                   |                                                                                                                   |
|                   | -   Each issue contains its own discussion thread                                                                 |
+-------------------+-------------------------------------------------------------------------------------------------------------------+

# The version control workflow with Git and GitHub {background-color="#a13c65"}


## On GitHub

::: columns
::: {.column width="40%"}
1)  Go to GitHub and create a new repository

![](images/new_repo.png){width="500px"}
:::

::: {.column width="60%"}
2)  Fill in some info, create a public repository ![](images/testrepo.png){width="800px"}
:::
:::

## 

3)  Follow the steps in Option 1: *"...create a new repository on the command line"*

![](images/push.png){width="900px"}

## In the terminal

4)  In the **terminal** 📱, navigate to your Quarto project folder:

::: {style="font-size: 70px;"}
``` {.bash filename="terminal"}
cd project_folder
```
:::

<br/>

. . .

5)  initialize a git repo on your local machine:

::: {style="font-size: 70px;"}
``` {.bash filename="terminal"}
git init
```
:::

<br/>

. . .

6)  create content you can then add in the next step (e.g., README file):

::: {style="font-size: 70px;"}
``` {.bash filename="terminal"}
touch README.md
```
:::

## 

7)  stage all the content in that folder to be added:

::: {style="font-size: 70px;"}
``` {.bash filename="terminal"}
git add .
```
:::

<br/>

. . .

8)  stage all the content in that folder to be committed:

::: {style="font-size: 70px;"}
``` {.bash filename="terminal"}
git commit -m "add empty readme"
```
:::

## 

9)  connect local repo to the remote repo. Substitute the link with your repo URL!

::: {style="font-size: 70px;"}
``` {.bash filename="terminal"}
git remote add origin https://github.com/AnneOkk/testrepo.git
```
:::

<br/>

. . .

10) push all the content from Git to GitHub:

::: {style="font-size: 70px;"}
``` {.bash filename="terminal"}
git push origin master
```
:::

<br/>

##

![](images/success.png){width="800px"}

### 🎈 The pushed files should appear in your GitHub repository 🎈


# `r fontawesome::fa("laptop-code", "white")` Your Turn (45 min) {background-color="#447099" transition="slide-in"}

##

## Poll: What would you like to focus on in the exercise? {background-color="#447099" transition="slide-in"}

::: fragment
### 1) Focus on R Project structure
:::

::: fragment
### 2) Focus on code improvement
:::

::: fragment
### 3) Focus on version control with Git and GitHub
:::

# `r fontawesome::fa("laptop-code", "white")` Your Turn (45 min) {background-color="#447099" transition="slide-in"}

1.  \[Get Git and GitHub running\]

2.  (Re)structure your project based on yesterday's instructions

3.  Connect your local R project folder with a GitHub repository

4.  Change some of the content in R, save, and then push the changes to GitHub

::: {style="font-size: 70px;"}
``` {.bash filename="terminal"}
git add .
git commit -m "senseful commit message that describes the change(s)"
git push origin master
```
:::


# Connecting osf to GitHub {background-color="#a13c65"}

## Connecting osf to GitHub

1)  Create your osf project

. . .

2)  Enable GitHub in Add-ons

![](images/osf_int.png){width="850px"}

## 

3)  Import GitHub Account

![](images/osf_imp.png){width="600px"}

## 

### 4. Select Repo

![](images/osf_sel.png){width="800px"}

. . .

### 🎊 Yey, you're all set to connect your GitHub content to osf! 🎊


# Extra: .gitignore {background-color="#a13c65"}

## Create a .gitignore file in your project folder

::: {style="font-size: 70px;"}
``` {.bash filename="terminal"}
touch .gitignore
```
:::

## Inside the .gitignore file

```
.Rproj.user
.Rhistory
.RData

# Data preparation folder
/Data_prep

# Some folders
/Manuscript_cache
/Tables
/Manuscript_files
/OLD

# Manuscript file
Manuscript.docx
```


## ...And there is so much more! {background-color="#a13c65"}

::: {style="text-align: right;"}
![](images/m3.jpeg){height="550px"}

Find me at:

`r fa("twitter")` [\@AnKaKleine](https://twitter.com/ankakleine?lang=en)

`r fa("github")` [\@AnneOkk](https://github.com/AnneOkk)

`r fa("link")` [http://annekathrinkleine.com/](https://annekathrinkleine.com//)
:::

-   You will get the chance to work on your own data analysis project

-   For this, you will have \~ 30 minutes to prepare the folder structure tomorrow

-   You may use either the example material or work on your own projects
